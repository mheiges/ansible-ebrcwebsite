---
- name: load setting for ebrcsite
  load_ebrcsite_vars: settings_file={{ settings_file }}

- include: confirmvars.yml

- set_fact: install_prop_file="/tmp/installWdkSite_{{ ebrc.httpd.vhost }}.prop"

- name: "Create site installation property file"
  template:
    src: templates/installWdkSite.prop.j2
    dest: "{{ install_prop_file }}"
  vars:
    vhost: "{{ ebrc.httpd.vhost }}"
    product: "{{ ebrc.wdk.modelname  }}"
    basic_auth_required: "{{ ebrc.httpd.basic_auth_required | lower }}"
    owner: "{{ ebrc.website.owner }}"
    webapp_ctx: "{{ ebrc.tomcat.webapp }}"
    tomcat_instance: "{{ ebrc.tomcat.instance }}"
    tomcat_major_version: "{{ ebrc.tomcat.majorversion }}"
    appdb: "{{ ebrc.wdk.modelconfig.appdb._alias }}"
    userdb: "{{ ebrc.wdk.modelconfig.userdb._alias }}"
    accountdb: "{{ ebrc.wdk.modelconfig.accountdb._alias }}"
    release_stage: "{{ ebrc.httpd.release_stage | upper }}"

- name: "Check {{ ebrc.tomcat.instance }} Tomcat status"
  command: "instance_manager status {{ ebrc.tomcat.instance }}" 
  register: tomcat_status
  failed_when: False
  changed_when: False

- name: "Enable {{ ebrc.tomcat.instance }} tomcat instance"
  command: "instance_manager enable {{ ebrc.tomcat.instance }}"
  become: True
  when: tomcat_status.rc != 0

- name: Check for existing /var/www/{{ ebrc.wdk.modelname }}/{{ ebrc.tomcat.webapp }}
  stat: path="/var/www/{{ ebrc.wdk.modelname }}/{{ ebrc.tomcat.webapp }}"
  register: site_dir

- name: run installWdkSite
  shell: "echo y | installWdkSite {{ install_prop_file }}"
  when: site_dir.stat.exists == False

# - name: "Create .euparc file"
#   template:
#     src: templates/euparc.j2
#     dest: "~/.euparc"
#   vars:
#     appdb_login: "{{ ebrc.wdk.modelconfig.appdb.login }}"
#     appdb_password: "{{ ebrc.wdk.modelconfig.appdb.password }}"
#     userdb_login: "{{ ebrc.wdk.modelconfig.userdb.login }}"
#     userdb_password: "{{ ebrc.wdk.modelconfig.userdb.password }}"
#     accountdb_login: "{{ ebrc.wdk.modelconfig.accountdb.login }}"
#     accountdb_password: "{{ ebrc.wdk.modelconfig.accountdb.password }}"

- name: "Create Conifer input file"
  template:
    src: templates/conifer_site_vars.yml.j2
    dest: "{{ ebrc.website._path }}/etc/conifer_site_vars.yml"
  become: True
  become_user: "{{ ebrc.website.owner }}"
  vars:
    appdb: "{{ ebrc.wdk.modelconfig.appdb._alias }}"
    appdb_password: "{{ ebrc.wdk.modelconfig.appdb.password }}"
    appdb_login: "{{ ebrc.wdk.modelconfig.appdb.login }}"
    userdb: "{{ ebrc.wdk.modelconfig.userdb._alias }}"
    userdb_login: "{{ ebrc.wdk.modelconfig.userdb.login }}"
    userdb_password: "{{ ebrc.wdk.modelconfig.userdb.password }}"
    accountdb: "{{ ebrc.wdk.modelconfig.accountdb._alias }}"
    accountdb_login: "{{ ebrc.wdk.modelconfig.accountdb.login }}"
    accountdb_password: "{{ ebrc.wdk.modelconfig.accountdb.password }}"

- subversion: repo="{{ item.location.remote }}"
              dest="{{  ebrc.website._path  }}/project_home/{{ item.location.local }}"
              revision="{{ item.location.revision|default('') }}"
              update=no
  with_items: "{{ ebrc.svn.locations }}"
  become: True
  become_user: "{{ ebrc.website.owner }}"
  when: ebrc.website.do_code_checkout and ebrc.svn is defined
  register: subversion_checkout

- name: |
    Running rebuilder. This will take a while.
    `tail -f {{ ebrc.website._path }}/gus_home/.buildlog/rebuilder.log`
    on guest for live status
  command: >
    /usr/local/bin/rebuilder {{ ebrc.httpd.vhost }} \
      --use-conifer     \
      --non-interactive   \
      --reinstall-config  \
      --skip-svn-update
  environment:
    PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
  async: 1800
  poll: 5
  become: True
  become_user: "{{ ebrc.website.owner }}"
  when: ebrc.website.do_build and subversion_checkout is defined and
        (subversion_checkout|succeeded and not subversion_checkout|skipped)

