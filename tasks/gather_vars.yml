# optional: use dashboard data if `source_webserver` is defined
# local vars override dashboard
#
# Injected, derived variables are named with leading underscore '_'.
#
# TODO: replace with plugin for quieter stdout, less coding logic in yaml.

- name: "include settings from {{ settings_file }}"
  include_vars:
    file: "{{ settings_file }}"
    name: usersettings

- name: determine settings path
  set_fact: settings_path="{{ settings_file|dirname }}"
  when: usersettings.dashboard.hostname is defined

- name: "check for existing {{ settings_path }}/{{ usersettings.dashboard.hostname }}_dashboard.json"
  stat: path="{{ settings_path }}/{{ usersettings.dashboard.hostname }}_dashboard.json"
        follow=True
  delegate_to: 127.0.0.1
  register: dashboard_json_file
  when: usersettings.dashboard.hostname is defined

- name: "Get environment from /dashboard"
  uri:
    url: "http://{{ usersettings.dashboard.hostname }}/dashboard/json"
    user: usersettings.dashboard.auth.username
    password: usersettings.dashboard.auth.password
    dest: "{{ settings_path }}/{{ usersettings.dashboard.hostname }}_dashboard.json"
  when: usersettings.dashboard.hostname is defined and dashboard_json_file.stat.exists == False
  delegate_to: 127.0.0.1
  register: _dashboard_raw
  failed_when: "_dashboard_raw.json.wdk is not defined"

- name: "include {{ settings_path }}/{{ usersettings.dashboard.hostname }}_dashboard.json"
  include_vars:
    file: "{{ settings_path }}/{{ usersettings.dashboard.hostname }}_dashboard.json"
    name: dashboard
  when: usersettings.dashboard.hostname is defined and
        (dashboard_json_file.stat.exists == True or _dashboard_raw is defined)

- name: merge settings
  set_fact: ebrc="{{ ( dashboard|default({}) )|combine( (usersettings), recursive=True ) }}"

# Inject some derived variables, named with leading underscore '_'.

- set_fact:
    ebrc: >
      {{ ebrc | 
        combine((
          { 'website':
            {
              '_path':
                '/var/www/' + ebrc.wdk.modelname + '/' + ebrc.tomcat.webapp
            }
          }
        ), recursive=True)
       }}

- set_fact:
    ebrc: >
      {{ ebrc | 
        combine((
          { 'wdk': {'modelconfig': {'appdb':
            {'_alias':
              ebrc.wdk.modelconfig.appdb.connectionurl | regex_replace('^jdbc:[^@]+@', '')
            }
          }}}
        ), recursive=True)
       }}

- set_fact:
    ebrc: >
      {{ ebrc | 
        combine((
          { 'wdk': {'modelconfig': {'userdb':
            {'_alias':
              ebrc.wdk.modelconfig.userdb.connectionurl | regex_replace('^jdbc:[^@]+@', '')
            }
          }}}
        ), recursive=True)
       }}
